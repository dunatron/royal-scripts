<?php

/**
 * Created by PhpStorm.
 * User: TRON
 * Date: 14/03/17
 * Time: 2:28 PM
 */
class Newsletter extends DataObject
{

    // mailchimp acc->user heathdunlop pass->RealSamdog11!
    private static $db = array(
        'Title' => 'Varchar(100)',
        'MailingList' => 'Varchar(100)',
        'TemplateID' => 'Int(100)',
        'subject_line' => 'Varchar(100)',
        'from_name' => 'Varchar(100)',
        'reply_to' => 'Varchar(100)',
        'MailChimpNewsletterID' => 'Varchar(100)',
        'MainLetterBlock' => 'Text',
        'SecondLetterBlock' => 'Text',
        'ThirdLetterBlock' => 'Text',
        'ExtraLetterLinks' => 'Text'
    );


    public function getCMSFields()
    {
        $fields = parent::getCMSFields();

        $mailingList = DropdownField::create(
            'MailingList',
            'MailingList',
            $this->getMailChimpLists()
        );

        $templateID = DropdownField::create(
            'TemplateID',
            'TemplateID',
            $this->getMailChimpTemplates()
        );

        $subjectLine = TextField::create('subject_line', 'Subject Line')
            ->setDescription('Newsletter subject');
        $fromName = TextField::create('from_name', 'From Name')
            ->setDescription('The \'from\' name of the campaign(not an email address)');
        $replyTo = TextField::create('reply_to', 'Reply to')
            ->setDescription('The reply to email address of the campaign/newsletter');
        $mainLetterBlock = TreeDropdownField::create('MainLetterBlock', 'Main Content for newsletter', 'SiteTree')
            ->setDescription('for de-selecting <strong>Choose page again</strong>');
        $secondLetterBlock = TreeDropdownField::create('SecondLetterBlock', 'Main Content for newsletter', 'SiteTree')
            ->setDescription('for de-selecting <strong>Choose page again</strong>');
        $thirdLetterBlock = TreeDropdownField::create('ThirdLetterBlock', 'Main Content for newsletter', 'SiteTree')
            ->setDescription('for de-selecting <strong>Choose page again</strong>');
        $extraLetterLinks = CheckboxSetField::create('ExtraLetterLinks', 'Extra Links for newsletter',
            $this->getAllPages());

        $fields->addFieldsToTab('Root.Main', array(
            $mailingList,
            $templateID,
            $subjectLine,
            $fromName,
            $replyTo,
            $mainLetterBlock,
            $secondLetterBlock,
            $thirdLetterBlock,
            $extraLetterLinks
        ));

        return $fields; // TODO: Change the autogenerated stub
    }


    public function onBeforeWrite()
    {
        parent::onBeforeWrite(); // TODO: Change the autogenerated stub
        //error_log($this->MailingList);
        if ($this->MailChimpNewsletterID != null || !empty($this->MailChimpNewsletterID)) {
            //error_log('We have a mailchimp id');
            $newsletterID = $this->MailChimpNewsletterID;
        } else {
            //error_log('NO CHIMP ID');
            $newsletterID = $this->createMailChimpCampaign();
            $this->MailChimpNewsletterID = $newsletterID;
        }
        //error_log($this->MailChimpNewsletterID);
        $templateID = $this->TemplateID;
        $this->setMailChimpTemplate($newsletterID, $templateID);

        $this->BuildNewsletterContent();
    }

    public function getAllPages()
    {
        //TODO: unsure why the id is coming through for the title
        $PageArray = array();
        $pages = Page::get();
        foreach ($pages as $p) {
            $obj = new DataObject();
            $obj->ID = $p->ID;
            $obj->Title = $p->Title;
            $PageArray[$obj->ID] = $obj->Title;
        }
        return $PageArray;
    }

    /*
     * base MailChimp API call
     */
    public function ChimpService()
    {
        $chimpService = new RestfulService('https://us4.api.mailchimp.com/3.0/');
        $chimpService->httpHeader('Authorization: apikey aec1aaaf3d113585538ca63cf101801c-us4');
        return $chimpService;
    }

    /*
     * Get MailChimp Mailing Lists
     */
    public function getMailChimpLists()
    {
        $service = $this->ChimpService();
        $endpoint = 'lists';
        $response = $service->request($endpoint, 'GET');

        $body = $response->getBody();
        $jObject = json_decode($body);

        $ListArray = array();
        foreach ($jObject->lists as $l) {
            $listObject = new DataObject();
            $listObject->id = $l->id;
            $listObject->name = $l->name;
            $ListArray[$listObject->id] = $listObject->name;
        }

        return $ListArray;
    }

    public function getMailChimpTemplates()
    {
        $TemplateArr = array();

        $service = $this->ChimpService();
        //$endpoint = 'templates?folder_id=73649e8476';
        //$endpoint = 'templates?type=user';
        $endpoint = 'templates?folder_id=73649e8476';
        //$endpoint = 'templates/?created_by=Heath Dunlop';
        //$endpoint = "templates";
        $response = $service->request($endpoint, 'GET');
        $body = $response->getBody();
        $jsonObj = json_decode($body);

        foreach ($jsonObj->templates as $o) {
            $obj = new DataObject();
            $obj->id = $o->id;
            $obj->name = $o->name;
            $TemplateArr[$obj->id] = $obj->name;
        }
        return $TemplateArr;
    }

    /*
     * Step 2 {create MailChimp campaign/newsletter for MailingList and details selected in data model}
     * create MailChimp campaign/newsletter
     * newsletter is created from MailingList DropDown created from getMailChimpLists()
     */
    public function createMailChimpCampaign()
    {
        $service = $this->ChimpService();
        $endpoint = 'campaigns';
        $obj = new stdClass();
        $obj->type = 'regular'; // type of campaign (regular,plaintext,absplit,rss,variate)
        $obj->recipients->list_id = $this->MailingList; //the unique list id
        $obj->settings->subject_line = $this->subject_line;
        $obj->settings->title = $this->Title;
        $obj->settings->from_name = $this->from_name; //The 'from' name of the campaign(not an email address)
        $obj->settings->reply_to = $this->reply_to;//The reply to email address of the campaign
        $obj->settings->inline_css = FALSE;
        $obj->content_type = 'template';

        $jObject = json_encode($obj);
        $response = $service->request($endpoint, 'POST', $jObject); // Newsletter is created at this point, we need response for its id to add content
        $body = $response->getBody();
        $jObject = json_decode($body);
        $newsLetterID = $jObject->id;
        return $newsLetterID;
    }

    /**
     * @param $campaignID
     * @param $templateID
     * PUT request to set newsletter/campaign template
     * also update the content for template
     */
    public function setMailChimpTemplate($campaignID, $templateID)
    {
        $idForTemplate = intval($templateID);

        $service = $this->ChimpService();
        $endpoint = 'campaigns/' . $campaignID . '/content';
        $obj = new stdClass();
        $obj->template->id = $idForTemplate;

        // Where to inject content
        $data = $this->BuildNewsletterContent();


//        $obj->template->sections->header_image = 'http://dunedin.whatshapp.nz/assets/Logos/_resampled/ScaleHeightWyI1MCJd/dunedin-logo-done2.png';
        $obj->template->sections->content_1 = $data->MainSection->ImageURL;
        $obj->template->sections->main_title = $data->MainSection->Title;
        $obj->template->sections->main_content = $data->MainSection->Content;
        // Second content
        $obj->template->sections->second_title = $data->SecondSection->Title;
        $obj->template->sections->second_content = $data->SecondSection->Content;
        // Third content
        $obj->template->sections->third_title = $data->ThirdSection->Title;
        $obj->template->sections->third_content = $data->ThirdSection->Content;
        // Ectra links
        $obj->template->sections->extra_links = $data->ExtraLinks;
        $jObject = json_encode($obj);
        $service->request($endpoint, 'PUT', $jObject);
    }

    /*
     * Currently not used
     */
    public function updateMailChimpCampaignContent($newsletterID, $templateID)
    {
        $service = $this->ChimpService();
        $endpoint = '/campaigns/' . $newsletterID . '/content';

        $test = 'Heellloo Dunatron';
        $obj = new DataObject();
        $obj->template->id = $templateID;

        //$data = json_encode($obj);
        $data = '{"html": "<p>The HTML to use for the saved campaign<./p>"}';

        $response = $service->request($endpoint, 'PUT', $data);
        $bod = $response->getBody();
        //error_log($bod);
    }

    /*
     * Can use this to get default content for template
     */
    public function getTemplateDefaultContent($templateID)
    {
        $service = $this->ChimpService();
        $endpoint = '/templates/' . $templateID . '/default-content';

        $response = $service->request($endpoint, 'GET');
        $body = $response->getBody();
        $decodedBody = json_decode($body);
        var_dump($decodedBody);

    }

    public function BuildNewsletterContent()
    {
        $baseURL = $_SERVER['SERVER_NAME'];

        $main = Page::get()->byID($this->MainLetterBlock);
        $second = Page::get()->byID($this->SecondLetterBlock);
        $third = Page::get()->byID($this->ThirdLetterBlock);

        $mainImage = $this->buildMailChimpImage($main->NewsLetterImage()->FileName);
        $secondImage = $this->buildMailChimpImage($main->NewsLetterImage()->FileName);
        $thirdImage = $this->buildMailChimpImage($main->NewsLetterImage()->FileName);

        error_log($mainImage);

        $MainData = ArrayData::create(array(
            'Title' => $main->Title,
            'Content' => strip_tags($main->Content),
            'ImageURL' => $mainImage
        ));

        $SecondData = ArrayData::create(array(
            'Title' => $second->Title,
            'Content' => strip_tags($second->Content),
            'ImageURL' => $secondImage
        ));

        $ThirdData = ArrayData::create(array(
            'Title' => $third->Title,
            'Content' => strip_tags($third->Content),
            'ImageURL' => $thirdImage
        ));

        $extraString = $this->ExtraLetterLinks;
        $extraArray = explode(",", $extraString);
        $extras = Page::get()->byIDs($extraArray);

        // Generate extra links as array

        $extraLinksArray = array();
        foreach ($extras as $e) {
            $link = '<li><a href="http://' . $baseURL . '/' . $e->URLSegment . '">' . $e->Title . '</a></li>';
            array_push($extraLinksArray, $link);
        }
        $linksString = implode(" ", $extraLinksArray);

        $data = ArrayData::create(array(
            'MainSection' => $MainData,
            'SecondSection' => $SecondData,
            'ThirdSection' => $ThirdData,
            'ExtraLinks' => $linksString
        ));

        return $data;
    }

    public function buildMailChimpImage($pathname)
    {
        $local = 'http://localhost:8888/TRONSTUDIOS/royal-scripts/';
        $b64image = base64_encode(file_get_contents($local .= $pathname));
        $buildMainImage = '<img src="data:image/jpeg;base64,' . $b64image . '">';
        return $buildMainImage;
    }


}
